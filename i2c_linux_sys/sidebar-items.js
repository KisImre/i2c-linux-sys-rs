initSidebarItems({"constant":[["I2C_FUNCS","Get the adapter functionality mask"],["I2C_FUNC_10BIT_ADDR",""],["I2C_FUNC_I2C",""],["I2C_FUNC_NOSTART","I2C_M_NOSTART"],["I2C_FUNC_PROTOCOL_MANGLING","I2C_M_IGNORE_NAK etc."],["I2C_FUNC_SLAVE",""],["I2C_FUNC_SMBUS_BLOCK_DATA",""],["I2C_FUNC_SMBUS_BLOCK_PROC_CALL","SMBus 2.0"],["I2C_FUNC_SMBUS_BYTE",""],["I2C_FUNC_SMBUS_BYTE_DATA",""],["I2C_FUNC_SMBUS_EMUL",""],["I2C_FUNC_SMBUS_HOST_NOTIFY",""],["I2C_FUNC_SMBUS_I2C_BLOCK",""],["I2C_FUNC_SMBUS_PEC",""],["I2C_FUNC_SMBUS_PROC_CALL",""],["I2C_FUNC_SMBUS_QUICK",""],["I2C_FUNC_SMBUS_READ_BLOCK_DATA",""],["I2C_FUNC_SMBUS_READ_BYTE",""],["I2C_FUNC_SMBUS_READ_BYTE_DATA",""],["I2C_FUNC_SMBUS_READ_I2C_BLOCK","I2C-like block xfer"],["I2C_FUNC_SMBUS_READ_WORD_DATA",""],["I2C_FUNC_SMBUS_WORD_DATA",""],["I2C_FUNC_SMBUS_WRITE_BLOCK_DATA",""],["I2C_FUNC_SMBUS_WRITE_BYTE",""],["I2C_FUNC_SMBUS_WRITE_BYTE_DATA",""],["I2C_FUNC_SMBUS_WRITE_I2C_BLOCK","w/ 1-byte reg. addr."],["I2C_FUNC_SMBUS_WRITE_WORD_DATA",""],["I2C_M_IGNORE_NAK","if I2C_FUNC_PROTOCOL_MANGLING"],["I2C_M_NOSTART","I2C_FUNC_NOSTART"],["I2C_M_NO_RD_ACK","if I2C_FUNC_PROTOCOL_MANGLING"],["I2C_M_RD","read data, from slave to master"],["I2C_M_RECV_LEN","length will be first received byte"],["I2C_M_REV_DIR_ADDR","if I2C_FUNC_PROTOCOL_MANGLING"],["I2C_M_STOP","if I2C_FUNC_PROTOCOL_MANGLING"],["I2C_M_TEN","this is a ten bit chip address"],["I2C_PEC","!= 0 to use PEC with SMBus"],["I2C_RDWR","Combined R/W transfer (one STOP only)"],["I2C_RDWR_IOCTL_MAX_MSGS",""],["I2C_RETRIES","number of times a device address should be polled when not acknowledging"],["I2C_SLAVE","Use this slave address"],["I2C_SLAVE_FORCE","Use this slave address, even if it is already in use by a driver!"],["I2C_SMBUS","SMBus transfer"],["I2C_SMBUS_BLOCK_DATA",""],["I2C_SMBUS_BLOCK_MAX","As specified in SMBus standard"],["I2C_SMBUS_BLOCK_PROC_CALL","SMBus 2.0"],["I2C_SMBUS_BYTE",""],["I2C_SMBUS_BYTE_DATA",""],["I2C_SMBUS_I2C_BLOCK_BROKEN",""],["I2C_SMBUS_I2C_BLOCK_DATA",""],["I2C_SMBUS_PROC_CALL",""],["I2C_SMBUS_QUICK",""],["I2C_SMBUS_READ",""],["I2C_SMBUS_WORD_DATA",""],["I2C_SMBUS_WRITE",""],["I2C_TENBIT","0 for 7 bit addrs, != 0 for 10 bit"],["I2C_TIMEOUT","set timeout in units of 10 ms"]],"enum":[["SmbusReadWrite","i2c_smbus_xfer read or write markers"],["SmbusTransaction","SMBus transaction types (size parameter in the above functions)"]],"fn":[["i2c_check_functionality","`I2C_FUNCS`"],["i2c_pec","`I2C_PEC`"],["i2c_rdwr",""],["i2c_set_retries","`I2C_RETRIES`"],["i2c_set_slave_address","`I2C_SLAVE` and `I2C_SLAVE_FORCE`"],["i2c_set_slave_address_10bit","`I2C_TENBIT`"],["i2c_set_timeout_ms","`I2C_TIMEOUT`"],["i2c_smbus","`I2C_SMBUS`"],["i2c_smbus_block_process_call",""],["i2c_smbus_process_call",""],["i2c_smbus_read_block_data",""],["i2c_smbus_read_byte",""],["i2c_smbus_read_byte_data",""],["i2c_smbus_read_i2c_block_data",""],["i2c_smbus_read_word_data",""],["i2c_smbus_write_block_data",""],["i2c_smbus_write_byte",""],["i2c_smbus_write_byte_data",""],["i2c_smbus_write_i2c_block_data",""],["i2c_smbus_write_quick",""],["i2c_smbus_write_word_data",""]],"mod":[["ioctls",""]],"struct":[["Flags",""],["Functionality","To determine what functionality is present"],["i2c_msg","an I2C transaction segment beginning with START"],["i2c_rdwr_ioctl_data","This is the structure as used in the I2C_RDWR ioctl call"],["i2c_smbus_data","Data for SMBus Messages"],["i2c_smbus_ioctl_data","This is the structure as used in the I2C_SMBUS ioctl call"]]});